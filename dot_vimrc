""" Basic Configuration

" To set the encode format
set fileencoding=utf-8
set termencoding=utf-8
set encoding=utf-8

" To set the tab to space
set expandtab

" To set the tab stop to 2
set ts=2

" To set the indent same
set autoindent

" To apply the vim's operation
set nocompatible

" To display the line number
set number

" To display the current line boldly
set cursorline

" To show normal mode's commands
set showcmd

" To set the quick search
set incsearch

" To display the airline
set laststatus=2

" To display the tabline
set showtabline=2

" To hide the default mode text
set noshowmode

" To set no backup
set nobackup

" To set the tab and space display
set listchars=tab:>-,trail:-
set list

set ttimeoutlen=50

set cmdheight=2

set updatetime=300

set shiftwidth=2

set foldmethod=manual

" To change the leader to space.
let g:mapleader = "\<Space>"

" To change the local leader to ,
let g:maplocalleader = ","

noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

""" End



""" Dracula Theme

packadd!dracula
syntax enable
colorscheme dracula

""" End



""" vim-which-key

let g:which_key_map = {}
let g:which_key_map.1 = 'which_key_ignore'
let g:which_key_map.2 = 'which_key_ignore'
let g:which_key_map.3 = 'which_key_ignore'
let g:which_key_map.4 = 'which_key_ignore'
let g:which_key_map.5 = 'which_key_ignore'
let g:which_key_map.6 = 'which_key_ignore'
let g:which_key_map.7 = 'which_key_ignore'
let g:which_key_map.8 = 'which_key_ignore'
let g:which_key_map.9 = 'which_key_ignore'
let g:which_key_map.0 = 'which_key_ignore'

nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>

" To register the dictionary
call which_key#register('<Space>', "g:which_key_map")

""" End



""" coc

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <F2> <Plug>(coc-refactor)


" Use <cr> to confirm completion
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() : "\<C-g>u\<CR>"


function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Down>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Multiple cursor support
nnoremap <C-c> <Plug>(coc-cursors-position)

nmap <expr> <silent> <C-d> <SID>select_current_word()
function! s:select_current_word()
  if !get(b:, 'coc_cursors_activated', 0)
    return "\<Plug>(coc-cursors-word)"
  endif
  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
endfunc

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

""" End



""" NERD Commenter

filetype plugin on
let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1

""" End



""" vim-gitgutter

nmap <Leader>hj <Plug>(GitGutterNextHunk)
nmap <Leader>hk <Plug>(GitGutterPrevHunk)
nmap <Leader>hs <Plug>(GitGutterStageHunk)
nmap <Leader>hu <Plug>(GitGutterUndoHunk)

""" End



""" coc-yank

nnoremap <silent> <Leader>ly : CocList yank<CR>
nnoremap <silent> <Leader>eyc : CocCommand yank.clean<CR>

""" End



""" coc-explorer

nnoremap <Leader>r :CocCommand explorer<CR>

""" End



""" coc-markdown-lint

nnoremap <silent> <leader>mf :CocCommand markdownlint.fixAll<CR>

""" End



""" coc-action

xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac <Plug>(coc-codeaction)


""" End



""" coc-snippets

let g:coc_snippet_next = '<tab>'

""" End



""" coc-lists

nnoremap <silent> <Leader>ls : CocList symbols<CR>
nnoremap <silent> <Leader>le : CocList diagnostics<CR>
nnoremap <silent> <Leader>lc : CocList changes<CR>
nnoremap <silent> <Leader>lo : CocList outline<CR>
nnoremap <silent> <Leader>lt : CocList tags<CR>
nnoremap <silent> <Leader>lf : CocList quickfix<CR>
nnoremap <silent> <Leader>lm : CocList marks<CR>
nnoremap <silent> <Leader>ll : CocList files<CR>
nnoremap <silent> <Leader>lj : CocNext<CR>
nnoremap <silent> <Leader>lk : CocPrev<CR>
nnoremap <silent> <Leader>lb : CocList buffers<CR>

""" End

